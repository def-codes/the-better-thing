import { Handler } from "../api";
import { STATUS } from "../constants";
import * as fs from "fs";
import { join } from "path";
import { promisify } from "util";

interface Options {
  /** Path to the `node_modules` directory in which to look for packages. */
  root: string;
}

const exists = promisify(fs.exists);
const readFile = promisify(fs.readFile);

const SCRIPT_EXTENSION = /\.js$/i;
const headers = { "Content-type": "text/javascript" };

async function* candidates(root: string, path: string) {
  // If an explicit file is referenced, try that first.
  if (SCRIPT_EXTENSION.test(path)) yield join(root, path);

  // Get package metadata to locate module file.
  const module_id = path.replace(SCRIPT_EXTENSION, "");
  const package_dir = join(root, module_id);
  const package_file = join(package_dir, "package.json");
  let package_candidates: string[] = [];
  if (await exists(package_file))
    try {
      const metadata = require(package_file);
      package_candidates = [
        metadata["umd:main"], // saw this in @thi.ng; is it a thing?
        metadata.browser,
        metadata.module,
        // metadata.main, // This is almost sure to be a CJS module
      ];
    } catch {}

  for (const name of [...package_candidates, "index.js", `${module_id}.js`])
    yield join(package_dir, name);
}

/** Serve the browser-friendly build of a node package, if one can be
 * determined. */
export const with_node_modules = ({ root }: Options): Handler => async ({
  path,
}) => {
  for await (const file of candidates(root, path))
    if (await exists(file))
      return { ...STATUS.OK, headers, body: await readFile(file, "utf-8") };

  return { ...STATUS.NOT_FOUND, message: `Couldn't find module for ${path}` };
};
