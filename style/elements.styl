@import types

// MESO-GENERAL

// Identified
[id]:not([id=""])
  --prefix '#' attr(id)
  Tag()
  &::before
    font-size 200%
    background white

// Classified
[class]:not([class=""])
  --type '.' attr(class)

[draggable="true"]
  outline 1em dashed rgba(green, .6)
  // Rules like this are not worth much.  Really need to assert *content*
  // 
  // Draggable()

&:hover
  Indicated()
	
// ==================================== ELEMENTS: singletons

// Discourage elements with no semantics
div
  border 1em solid rgba(red, .5)
span
  border 0.2em dashed rgba(red, .5)

html
  background none

body
.Space
  Space()

main
  // --main-background white
  margin var(--main-margin)

// ================================ ELEMENTS: SPECIAL

p
  Paragraph()

// Links are the holiest thing.
a
  Navigable()

ul
  UnorderedList()

ol
  OrderedList()

li
  Item()

dl
  Dictionary()

dt
  &::after
    content 'â†’'

// How can you tell it's a label?
// label, .Label
//   background-color hsla(255 * var(--label-hue), 255 * var(--label-saturation), 255 * var(--label-luminosity), var(--label-alpha))

// STATEFUL : might be in collapsed state
details
  border 1em solid rgba(red, 0.1)

// AFFORDANCE
// STATEFUL : might be in collapsed state
summary
  Affordance()

aside
  border 1em solid yellow
  float right
  // width 50%

// unit of portability
// unit of context
// unit of provenance
//
// It may be all those things, but does it afford moving?
// Does it afford etc?
article
  display inline-block
  --article-margin 4em
  // border 2em solid rgba(black, 0.2)
  margin var(--article-margin)
  background rgba(black, 0.1)
  margin 1em

section
  margin-top 1em

header
  SectioningContent
  --type 'Header'

// unit of provenance
// should have a citation nearby 
blockquote
  Lens() // not exactly, but out-of-context
  Quotation()
  margin-left 4em
  --alpha 0.6

// Wait wut?
script
  display block
  white-space pre

output
  Output()

address
  FlowContent()
  PalpableContent()
  // *should* be navigable

p
  PhrasingContext()

cite
  PhrasingContent()
  Citation()

// Treat `code` and `output` as block unless in phrasing context
p code, p output
  PhrasingContent()
  display default

code, output
  FlowContent()
  display block

s
  PhrasingContent()
  Stricken()
